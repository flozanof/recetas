import React, { ChangeEvent } from 'react';
import { useImmer } from 'use-immer';
import TextField from '@mui/material/TextField';
import Button from '@mui/material/Button';
import { IReceta } from '../interfaces/Types';
import RecetaLoading from './recetaLoading';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import { IIngredienteGrupo, IIngrediente, IElaboracion } from '../interfaces/Types';
import MenuItem from '@mui/material/MenuItem';
import Select, { SelectChangeEvent } from '@mui/material/Select';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Unstable_Grid2';
import Paper from '@mui/material/Paper';
import Typography from '@mui/material/Typography';
import styled from '@mui/material/styles/styled';
import { useDownloadFile } from "react-downloadfile-hook";

interface IRecipeProps {
    handleEditMode: () => void;
    fileNameRecipe: string;
    receta: IReceta;
    mode: string;
}

const MyPaper = styled(Paper)(({ theme }) => ({
    ...theme.typography.body2,
    color: theme.palette.text.secondary,
    lineHeight: '60px',
    padding: '5px'
}));



function getListaElaboracion(elaboraciones: IElaboracion[]) {
    return (
        <ul>
            {elaboraciones.map((elaboracion, index) => {
                return (
                    <div key={index}>
                        <li key="{2 * index}">
                            <TextField
                                margin="dense"
                                id="paso"
                                label="Paso"
                                type="number"
                                fullWidth
                                variant="outlined"
                                defaultValue={elaboracion.Paso}
                            />
                        </li>
                        <li key="{(2 * index) + 1}">
                            <TextField
                                margin="dense"
                                id="descripcion"
                                label="Descripcion"
                                multiline
                                fullWidth
                                variant="outlined"
                                defaultValue={elaboracion.Descripcion}
                            />
                        </li>
                    </div>
                )
            })}
        </ul>
    )
}

function getFormJsonData(recipe : IReceta) {
    console.log("*************** GET FORM JSON DATA ************");
    return JSON.stringify(recipe);
}


{/*
const { downloadFile } = useDownloadFile({
    fileName: "receta.json",
    format: "applicationn/json",
    data: '{"hola": "adios"}',
});
*/}
{/*data: getFormJsonData(),*/ }

export default function RecetaForm(props: IRecipeProps) {
    //    const [recipe, setRecipe] = React.useState<IReceta>({ Nombre: '', Foto: '', Comensales: 0, Dificultad: 0, TiempoCoccion: 0, TiempoElaboracion: 0, TecnicaElaboracion: '', IngredientesGrupo: [], Elaboracion: [], Notas: ['una', 'dos'] });
        const [recipe, setRecipe] = React.useState<IReceta>(props.receta);
    const[ingredients, setIngredients] = React.useState<IIngrediente[]>(props.receta.Ingredientes);
//    const [recipe, updateRecipe] = useImmer<IReceta>(props.receta);
    const [open, setOpen] = React.useState(true);
    const [fileNameRecipe, setfileNameRecipe] = React.useState(props.fileNameRecipe);

    const handleClose = () => {
        setOpen(false);
        props.handleEditMode();
    };

    const handleInputChange = (changeEvent: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        //        changeEvent.preventDefault();
        console.log("Modificación GENÉRICO: " + changeEvent.currentTarget.name + " - " + changeEvent.currentTarget.value)
        //        const {name, value} = changeEvent.currentTarget;
        //        let attrName = name as keyof IReceta;
        //        recipe.Nombre = value;
        //        setRecipe(recipe);
//        updateRecipe({ ...recipe, [changeEvent.currentTarget.name]: changeEvent.currentTarget.value });
        console.log("Nombre receta: " + recipe.Nombre);
    }

    function handleIngredientChange(props: {
        index: number;
        changeEvent: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>;
    }) {
        props.changeEvent.preventDefault();
        const { name, value } = props.changeEvent.target
        console.log("TARGET8: " + name + "." + value);
        let attrName = name as keyof IIngrediente;
        console.log("Modificación INGREDIENTE: index=" + props.index + "." + props.changeEvent.currentTarget.name + " - " + props.changeEvent.currentTarget.value)
console.log("ANTES:"+getFormJsonData(recipe));
const updatedIngredients: IIngrediente[] = ingredients.map((ing, i) => {
            if (i === props.index) {
                ing.Nombre = props.changeEvent.currentTarget.value;
                return ing;
            } else {
                return ing;
            }
        });
        console.log("INGREDIENTES MOD:"+ updatedIngredients);
        setIngredients(updatedIngredients);
{/*
        */}
            console.log("DESPUES:"+getFormJsonData(recipe));
{/*
        updateRecipe(draft => {
            const ingredient: IIngrediente = draft.Ingredientes[props.index];
            ingredient.Nombre = value;
            //ingredient[attrName] = value;
        })
    */}
    }

    function Ingredientes(propsIng: {
        grpIng: IIngredienteGrupo[];
        ingredientes: IIngrediente[];
        evento: typeof handleIngredientChange;
    }) {
        if (propsIng.grpIng.length > 0) {
            return (
                <>
                    {
                        propsIng.grpIng.map((grp, grpIndex) => {
                            return (
                                <div key={grpIndex}>
                                    {(propsIng.grpIng.length > 1) &&
                                        <TextField
                                            margin="dense"
                                            id="ingGrupo"
                                            name={"Grupo"}
                                            label="Nombre Grupo"
                                            fullWidth
                                            variant="outlined"
                                            defaultValue={grp.Grupo}
//                                            onChange={(event) => propsIng.evento({ index: grpIndex, changeEvent: event })}
                                        />
                                    }
                                    <ul>
                                        {grp.IngredientesRef.map((index) => {
                                            return (
                                                <div key={index}>
                                                    <li key={index}>
                                                        <TextField
                                                            margin="dense"
                                                            id={"ingNombre" + index}
                                                            name={"Nombre"}
                                                            label="Nombre"
                                                            variant="outlined"
                                                            defaultValue={propsIng.ingredientes[index].Nombre}
                                                            onChange={(event) => propsIng.evento({index:index, changeEvent: event})}
                                                            sx={{
                                                                '& > :not(style)': { m: 0.5, width: '19ch' },
                                                            }}
                                                        />
                                                        <TextField
                                                            margin="dense"
                                                            id={"ingCantidad" + index}
                                                            name={"Cantidad"}
                                                            label="Cantidad"
                                                            variant="outlined"
                                                            defaultValue={propsIng.ingredientes[index].Cantidad}
                                                            onChange={(event) => propsIng.evento({index:index, changeEvent: event})}
                                                            sx={{
                                                                '& > :not(style)': { m: 0.5, width: '9ch' },
                                                            }}
                                                        />
                                                        <Select
                                                            labelId="demo-simple-select-standard-label"
                                                            id={"ingUnidad" + index}
                                                            name={"Unidad"}
                                                            label="Unidad"
                                                            //onChange={(event) => propsIng.evento({index:grpIndex, changeEvent: event})}
                                                            value={propsIng.ingredientes[index].Unidad}
                                                            inputProps={{
                                                                name: 'imgUnidad',
                                                                id: 'ingUnidad',
                                                            }}
                                                            sx={{
                                                                '& > :not(style)': { m: 1.5, width: '14ch' },
                                                            }}
                                                        >
                                                            <MenuItem value={"Unidad" as any}>Unidad</MenuItem>
                                                            <MenuItem value="Cucharada">Cucharada</MenuItem>
                                                            <MenuItem value="Cucharadita">Cucharadita</MenuItem>
                                                            <MenuItem value="Litro">Litro</MenuItem>
                                                            <MenuItem value="Mililitro">Mililitro</MenuItem>
                                                            <MenuItem value="Kilogramo">Kilogramo</MenuItem>
                                                            <MenuItem value="Gramo">Gramo</MenuItem>
                                                            <MenuItem value="Taza">Taza</MenuItem>
                                                        </Select>
                                                    </li>
                                                </div>
                                            )
                                        })}
                                    </ul>
                                </div>
                            )
                        }
                        )
                    }
                </>
            )
        }
    }

{/*
    const { linkProps } = useDownloadFile({
        fileName: 'prueba.json',
        format: "application/json",
        data: getFormJsonData(recipe),
    });
*/}

    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
        event.preventDefault();
        console.log("***************  HANDLE SUBMIT  ****************");
    }

    function saveFile() {
        console.log("******* Entra en saveFile *******");
//        setNameFile("Prueba2.json");
//        downloadFile();
    }

    if (recipe.Nombre) {
        return (
            console.log("------------------  PINTANDO ------------------------------------------"),
            <Dialog
                fullWidth={true}
                maxWidth={"xl"}
                open={open}>
                <DialogTitle>{(props.mode === "U") ? "Modificación Receta" : "Nueva Receta"}</DialogTitle>
                <DialogContent>
                    <DialogContentText marginBottom={3}>
                        Inserte los datos de la receta, guárdala y descárgala.
                        Posteriormente suba manualmente el fichero json al servidor junto con la imagen.
                    </DialogContentText>
                                            <Box sx={{ width: '100%' }}>
                        <Grid container spacing={2}>

                            <Grid md={12} xl={3}>
                                <MyPaper elevation={3}>
                                <Box
                        component="form"
                        sx={{
                            '& .MuiTextField-root': { m: 1, width: '25ch' },
                            width: '100%',
                            boxShadow: 3,
                            //                                maxWidth: 500,
                            minWidth: 300,
                            p: 1
                        }}
                        noValidate
                        autoComplete="off"
                        onSubmit={handleSubmit}
//                        display="flex"
//                        justifyContent="center"
                    >
                                    <Typography paragraph variant="h6" align='center'>
                                        DATOS GENÉRICOS
                                    </Typography>
                                    <TextField
                                        margin="dense"
                                        id="nombre"
                                        name="Nombre"
                                        label="Nombre"
                                        type='string'
                                        fullWidth
                                        multiline
                                        variant="outlined"
                                        defaultValue={props.receta.Nombre}
                                        onChange={handleInputChange}
                                    />
                                    <TextField
                                        margin="dense"
                                        id="foto"
                                        name="Foto"
                                        label="Foto"
                                        fullWidth
                                        variant="outlined"
                                        defaultValue={props.receta.Foto}
                                        onChange={handleInputChange}
                                    />
                                    <TextField
                                        margin="dense"
                                        id="comensales"
                                        name="Comensales"
                                        label="Comensales"
                                        type="number"
                                        variant="outlined"
                                        defaultValue={props.receta.Comensales}
                                        onChange={handleInputChange}
                                        sx={{
                                            '& > :not(style)': { m: 1, width: '11ch' },
                                        }}
                                    />
                                    <TextField
                                        margin="dense"
                                        id="dificultad"
                                        name='Dificultad'
                                        label="Dificultad"
                                        type="number"
                                        variant="outlined"
                                        defaultValue={props.receta.Dificultad}
                                        onChange={handleInputChange}
                                        sx={{
                                            '& > :not(style)': { m: 1, width: '9ch' },
                                        }}
                                    />
                                    <TextField
                                        margin="dense"
                                        id="tiempoElaboracion"
                                        name="TiempoElaboracion"
                                        label="Tiempo Elaboración"
                                        type="number"
                                        variant="outlined"
                                        defaultValue={props.receta.TiempoElaboracion}
                                        onChange={handleInputChange}
                                        sx={{
                                            '& > :not(style)': { m: 1, width: '17ch' },
                                        }}
                                    />
                                    <TextField
                                        margin="dense"
                                        id="tiempoCoccion"
                                        name="TiempoCoccion"
                                        label="Tiempo Cocción"
                                        type="number"
                                        variant="outlined"
                                        defaultValue={props.receta.TiempoCoccion}
                                        onChange={handleInputChange}
                                        sx={{
                                            '& > :not(style)': { m: 1, width: '14ch' },
                                        }}
                                    />
                                    <TextField
                                        margin="dense"
                                        id="tecnicaElaboracion"
                                        name="TecnicaElaboracion"
                                        label="Técnica Elaboración"
                                        variant="outlined"
                                        defaultValue={props.receta.TecnicaElaboracion}
                                        onChange={handleInputChange}
                                        sx={{
                                            '& > :not(style)': { m: 1, width: '17ch' },
                                        }}
                                    />
                    </Box>
                                </MyPaper>
                            </Grid>
                            <Grid md={6} xl={5}>
                                <MyPaper elevation={3}>
                                    <Typography paragraph variant="h6" align='center'>
                                        INGREDIENTES
                                    </Typography>
                                    <Ingredientes grpIng={recipe.IngredientesGrupo} ingredientes={recipe.Ingredientes} evento={handleIngredientChange} />
                                </MyPaper>
                            </Grid>
                            <Grid md={6} xl={4}>
                                <MyPaper elevation={3}>
                                    <Typography paragraph variant="h6" align='center'>
                                        ELABORACIÓN
                                    </Typography>

                                    {/*                                    {getListaElaboracion(props.receta.Elaboracion)}*/}
                                </MyPaper>
                            </Grid>
                        </Grid>
                        </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleClose}>Cancel</Button>
                    {/*<Button onClick={saveFile}>Download File</Button>*/}
                    {/*<a {...linkProps}>Download SVG File</a>;*/}
                    {/*<Button onClick={() => download(fileUrl, filename)}>Download</Button>*/}
                </DialogActions>
            </Dialog>
        )
    } else {
        return <RecetaLoading />
    }
}
